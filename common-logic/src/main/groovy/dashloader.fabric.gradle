import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'fabric-loom'
    id 'java-library'
    id 'dashloader.definition'
}

group "net.oskarstrom.dashloader"
version "${project.definitionVersion}"

repositories {
    maven {
        name "Fabric"
        url "https://maven.fabricmc.net"
    }
    maven {
        name "TerraformersMC"
        url getTerraformersMCMaven()
    }
    mavenCentral()
    maven {
        name "Sonatype Snapshots"
        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:$project.minecraft_version"
    mappings("net.fabricmc:yarn:$project.yarn_version:v2")
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version"

    modImplementation "com.terraformersmc:modmenu:$project.modmenu_version"

    api "net.oskarstrom.dashloader:dashloader-core:$project.dashloader_core_version"
    include "net.oskarstrom.dashloader:dashloader-core:$project.dashloader_core_version"

    api project(":def-fabric-common")
    //TODO: do we need to JiJ it as well? if so we need to rethink the template thing
}

processResources {
    inputs.property("version", rootProject.version)

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.version
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier = null
            }
            artifact(sourcesJar) {
                classifier = "sources"
                builtBy remapSourcesJar
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

task createFabricModJson(type: MergeJson) {
    files = files(
            project(":def-fabric-common").file("src/main/resources/fabric.mod.json"),
            file("src/main/resources/fabric.mod.override.json")
    )
    target = file("$buildDir/generated/resources/main/fabric.mod.json")
}

processResources {
    dependsOn createFabricModJson
    exclude 'fabric.mod.override.json'
}

sourceSets {
    main {
        resources {
            srcDir "$buildDir/generated/resources/main"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier = null
            }
            artifact(sourcesJar) {
                classifier = "sources"
                builtBy remapSourcesJar
            }
        }
    }
    repositories {
        mavenLocal()
    }
}


// Temporary hack since TerraformersMC's maven is straight up cursed
// courtesy to LambdAurora
String getTerraformersMCMaven() {
    def terraformersUrl = 'https://maven.terraformersmc.com/'
    if (pingUrl(terraformersUrl))
        return terraformersUrl
    else
        return 'https://maven.kotlindiscord.com/repository/terraformers/'
}

boolean pingUrl(String address) {
    try {
        def conn = (HttpURLConnection) new URL(address).openConnection()
        int responseCode = conn.getResponseCode()
        return (200 <= responseCode && responseCode <= 399)
    } catch (IOException ignored) {
        return false
    }
}

// blessed shit

class MergeJson extends DefaultTask {
    @InputFiles
    FileCollection files
    @OutputFile
    File target
    @TaskAction
    void concat() {
        def slurper = new JsonSlurper()
        target.withWriter { writer ->
            def json = [:]
            files.each { file ->
                json += slurper.parse(file)
            }
            writer.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
        }
    }
}


abstract class FabricDefinitionExtension {
    abstract boolean useJava16 = false
}

extensions.create("fabricDefinition", FabricDefinitionExtension)

if (fabricDefinition.useJava16) {
    tasks.withType(JavaCompile).configureEach {
        // Minecraft 1.17 (21w19a) upwards uses Java 16.
        options.release.set(16)
    }
}